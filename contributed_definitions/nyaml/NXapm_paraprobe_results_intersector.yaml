category: application
doc: |
  Results of a paraprobe-intersector tool run.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  n_c2n: The total number of links pointing from current to next.
  n_n2c: The total number of links pointing from next to current.
  n_features_curr: The total number of members in the current_set.
  n_features_next: The total number of members in the next_set.
  n_cluster: The total number of cluster found for coprecipitation analysis.
  n_total: The number of rows in the table/matrix for coprecipitation stats.

NXapm_paraprobe_results_intersector:
  (NXentry):
    # by default for appdefs the value of the exists keyword is required
    # unless it is explicitly specified differently
    \@version:
      doc: Version specifier of this application definition.

# ##MK::begin of the tool-specific section
    definition:
      doc: Official NeXus NXDL schema with which this file was written.
      enumeration: [NXapm_paraprobe_results_intersector]
# ##MK::end of the tool-specific section

    program:
      doc: |
        Given name of the program/software/tool with which this NeXus
        (configuration) file was generated.
      \@version:
        doc: |
          Ideally program version plus build number, or commit hash or description
          of ever persistent resources where the source code of the program and
          build instructions can be found so that the program can be configured
          ideally in such a manner that the result of this computational process
          is recreatable in the same deterministic manner.
    analysis_identifier:
      exists: optional
      doc: |
        Ideally, a (globally persistent) unique identifier for referring
        to this analysis.
    analysis_description:
      exists: optional
      doc: |
        Possibility for leaving a free-text description about this analysis.
    time_stamp(NX_DATE_TIME):
      doc: |
        ISO 8601 formatted time code with local time zone offset to UTC
        information included when this results file was created.
    config_filename:
      doc: |
        The absolute path and name of the config file for this analysis.
      \@version:
        doc: |
          At least SHA256 strong hash of the specific config_file for
          tracking provenance.
    results_path:
      exists: optional
      doc: |
        Path to the directory where the tool should store NeXus/HDF5 results
        of this analysis. If not specified results will be stored in the
        current working directory.
    (NXuser):
      exists: recommended
      doc: |
        If used, contact information and eventually details
        of at least the person who performed this analysis.
      name:
      affiliation:
        exists: recommended
      address:
        exists: optional
      email:
        exists: recommended
      orcid:
        exists: recommended
      orcid_platform:
        exists: recommended
      telephone_number:
        exists: optional
      role:
        exists: recommended
      social_media_name:
        exists: optional
      social_media_platform:
        exists: optional
    (NXcoordinate_system_set):
      exists: optional
      doc: Details about the coordinate system conventions used.
      (NXtransformations):
        exists: [min, 1, max, infty]
        doc: |
          The individual coordinate systems which should be used.
          Field names should be prefixed with the following controlled terms
          indicating which individual coordinate system is described:
          
          * paraprobe
          * lab
          * specimen
          * laser
          * leap
          * detector
          * recon
          

# ##MK::begin of the tool-specific section
    (NXprocess):
      volume_volume_spatial_correlation(NXprocess):
        exists: [min, 0, max, 1]
        doc: |
          The results of an overlap/intersection analysis.
        current_to_next_link(NX_UINT):
          doc: |
            A matrix of feature_identifier which specifies which named features
            from the current set have directed link(s) pointing to which named
            feature(s) from the next set.
          unit: NX_UNITLESS
          dimensions:
            rank: 2
            dim: [[1, n_c2n], [2, 2]]
        current_to_next_link_type(NX_UINT):
          doc: |
            For each link/pair in current_to_next a characterization
            whether the link is due to a volumetric overlap (0x00 == 0), 
            proximity (0x01 == 1), or something else unknown (0xFF == 255).
          unit: NX_UNITLESS
          dimensions:
            rank: 1
            dim: [[1, n_c2n]]
        next_to_current_link(NX_UINT):
          exists: optional  # is an intersection analysis symmetrical ?
          doc: |
            A matrix of feature_identifier which specifies which named feature(s)
            from the next set have directed link(s) pointing to which named
            feature(s) from the current set. Only if the mapping whereby the
            links is symmetric next_to_current maps the links in current_to_next
            in the opposite direction.
          unit: NX_UNITLESS
          dimensions:
            rank: 2
            dim: [[1, n2c], [2, 2]]
        next_to_current_link_type(NX_UINT):
          exists: optional
          doc: |
            For each link/pair in next_to_current a characterization
            whether the link is due to a volumetric overlap (0x00 == 0), 
            proximity (0x01 == 1), or something else unknown (0xFF == 255).
          unit: NX_UNITLESS
          dimensions:
            rank: 1
            dim: [[1, n_n2c]]
        intersection_volume(NX_FLOAT):
          exists: optional
          doc: |
            For each pair of links in current_to_next the volume of the
            intersection, i.e. how much volume do the two features share.
            If features do not intersect the volume is zero.
          unit: NX_VOLUME
          dimensions:
            rank: 1
            dim: [[1, c2n]]
        coprecipitation_analysis(NXprocess):
          exists: optional
          doc: |
            During coprecipitation analysis the current and next set are analyzed
            for links in a special way. Three set comparisons are made. Members
            of the set in each comparison are analyzed for overlap and proximity:
            
            The first comparison is the current_set against the current_set.
            The second comparison is the next_set against the next_set.
            The third comparison is the current_set against the next_set.
            
            Once the (forward) links for these comparisons are ready the
            pair relations are analyzed with respect to which feature identifier
            cluster in identifier space. Thereby a logical connection (link) is
            established between the features in the current_set and next_set.
            Recall that these two set typically represent different features
            within an observed system for otherwise the same parameterization.
            Examples include two sets of e.g. precipitates with differing
            chemical composition that were characterized in the same material
            volume representing a snapshot of an e.g. microstructure at the same
            point in time. Researchers may have performed two analyses, one to
            characterize precipitates A and another one to characterize percipitates
            B. Coprecipitation analysis now logically connects these independent
            characterization results to establish spatial correlations of e.g.
            precipitates spatial arrangement.
          current_set_feature_to_cluster(NX_UINT):
            doc: |
              Matrix of feature_identifier and cluster_identifier pairs which
              encodes the cluster to which each feature_identifier was assigned.
              Here for features of the current_set.
            unit: NX_UNITLESS
            dimensions:
              rank: 2
              dim: [[1, n_features_curr], [2, 2]]
          next_set_feature_to_cluster(NX_UINT):
            doc: |
              Matrix of feature_identifier and cluster_identifier pairs which
              encodes the cluster to which each feature_identifier was assigned.
              Here for features of the next_set.
            unit: NX_UNITLESS
            dimensions:
              rank: 2
              dim: [[1, n_features_next], [2, 2]]
          cluster_identifier(NX_UINT):
            doc: |
              The identifier (names) of the cluster.
            unit: NX_UNITLESS
            dimensions:
              rank: 1
              dim: [[1, n_cluster]]
          cluster_composition(NX_UINT):
            doc: |
              Pivot table as a matrix. The first column encodes how many
              members from the current_set are in each cluster, one row per cluster.
              The second column encodes how many members from the next_set are
              in each cluster, in the same row per cluster respectively.
              The last column encodes the total number of members in the cluster.
            unit: NX_UNITLESS
            dimensions:
              rank: 2
              dim: [[1, n_cluster], [2, 3]]
          cluster_statistics(NX_UINT):
            doc: |
              Pivot table as a matrix. The first column encodes the different
              types of clusters based on their number of members in the sub-graph.
              The second column encodes how many clusters with as many members
              exist.
            unit: NX_UNITLESS
            dimensions:
              rank: 2
              dim: [[1, n_total], [2, 2]]
      # ##MK::add results from NXapm_paraprobe_results_clusterer

# ##MK::end of the tool-specific section

    performance(NXcs_profiling):
      exists: recommended
      current_working_directory:
      command_line_call:
        exists: optional
      start_time(NX_DATE_TIME):
        exists: recommended
      end_time(NX_DATE_TIME):
        exists: recommended
      total_elapsed_time(NX_NUMBER):
      number_of_processes(NX_POSINT):
      number_of_threads(NX_POSINT):
      number_of_gpus(NX_POSINT):
      (NXcs_computer):
        exists: recommended
        name:
          exists: recommended
        operating_system:
          \@version:
        uuid:
          exists: optional
        (NXcs_cpu):
          exists: [min, 0, max, infty]
          name:
            exists: optional
          (NXfabrication):
            exists: recommended
            identifier:
              exists: optional
            capabilities:
              exists: optional
        (NXcs_gpu):
          exists: [min, 0, max, infty]
          name:
            exists: optional
          (NXfabrication):
            exists: recommended
            identifier:
              exists: optional
            capabilities:
              exists: optional
        (NXcs_mm_sys):
          exists: [min, 0, max, 1]
          total_physical_memory(NX_NUMBER):
        (NXcs_io_sys):
          exists: [min, 0, max, 1]
          (NXcs_io_obj):
            exists: [min, 1, max, infty]
            technology:
            max_physical_capacity(NX_NUMBER):
            name:
              exists: optional
            (NXfabrication):
              exists: recommended
              identifier:
                exists: optional
              capabilities:
                exists: optional

        (NXcs_profiling_event):
          start_time(NX_DATE_TIME):
            exists: optional
          end_time(NX_DATE_TIME):
            exists: optional
          description:
          elapsed_time(NX_NUMBER):
          number_of_processes(NX_POSINT):
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_processes
              in the NXcs_profiling super class.
          number_of_threads(NX_POSINT):
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_threads
              in the NXcs_profiling super class.
          number_of_gpus(NX_POSINT):
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_threads
              in the NXcs_profiling super class.
          max_virtual_memory_snapshot(NX_NUMBER):
            exists: recommended
          max_resident_memory_snapshot(NX_NUMBER):
            exists: recommended
