category: application
doc: | 
  This is a definition for event data from Spallation Neutron Source (SNS) at ORNL.

type: group
NXsnsevent(NXobject):
  (NXentry):
    exists: ['min', '1']
    (NXcollection)DASlogs:
      doc: |         
        Details of all logs, both from cvinfo file and from HistoTool (frequency and proton_charge).
      (NXlog):
        exists: ['min', '1']
        average_value(NX_FLOAT):
        average_value_error(NX_FLOAT):
          exists: optional
          deprecated: see https':'//github.com/nexusformat/definitions/issues/821
        average_value_errors(NX_FLOAT):
        description:
        duration(NX_FLOAT):
        maximum_value(NX_FLOAT):
        minimum_value(NX_FLOAT):
        time(NX_FLOAT):
          dimensions:
            rank: 1
            dim: [[1, nvalue]]
        value(NX_FLOAT):
          dimensions:
            rank: 1
            dim: [[1, nvalue]]
      (NXpositioner):
        exists: ['min', '0']
        doc: |           
          Motor logs from cvinfo file.
        average_value(NX_FLOAT):
        average_value_error(NX_FLOAT):
          exists: optional
          deprecated: see https':'//github.com/nexusformat/definitions/issues/821
        average_value_errors(NX_FLOAT):
        description:
        duration(NX_FLOAT):
        maximum_value(NX_FLOAT):
        minimum_value(NX_FLOAT):
        time(NX_FLOAT):
          dimensions:
            rank: 1
            dim: [[1, numvalue]]
        value(NX_FLOAT):
          dimensions:
            rank: 1
            dim: [[1, numvalue]]
    (NXnote)SNSHistoTool:
      SNSbanking_file_name:
      SNSmapping_file_name:
      author:
      command1:
        doc: |           
          Command string for event2nxl.
      date:
      description:
      version:
    (NXdata):
      exists: ['min', '1']
      data_x_y(link):
        target: /NXentry/NXinstrument/NXdetector/data_x_y
      x_pixel_offset(link):
        target: /NXentry/NXinstrument/NXdetector/x_pixel_offset
      y_pixel_offset(link):
        target: /NXentry/NXinstrument/NXdetector/y_pixel_offset
    (NXevent_data):
      exists: ['min', '1']
      event_index(link):
        target: /NXentry/NXinstrument/NXdetector/event_index
      event_pixel_id(link):
        target: /NXentry/NXinstrument/NXdetector/event_pixel_id
      event_time_of_flight(link):
        target: /NXentry/NXinstrument/NXdetector/event_time_of_flight
      pulse_time(link):
        target: /NXentry/NXinstrument/NXdetector/pulse_time
    collection_identifier:
    collection_title:
    definition:
      doc: |         
        Official NXDL schema after this file goes to applications.
      enumeration: [NXsnsevent]
    duration(NX_FLOAT):
      unit: NX_TIME
    end_time(NX_DATE_TIME):
    entry_identifier:
    experiment_identifier:
    (NXinstrument)instrument:
      (NXsource)SNS:
        frequency(NX_FLOAT):
          unit: NX_FREQUENCY
        name:
        probe:
        type:
      SNSdetector_calibration_id:
        doc: |           
          Detector calibration id from DAS.
      SNSgeometry_file_name:
      SNStranslation_service:
      (NXdetector):
        exists: ['min', '1']
        azimuthal_angle(NX_FLOAT):
          unit: NX_ANGLE
          dimensions:
            rank: 2
            dim: [[1, numx], [2, numy]]
        data_x_y(NX_UINT):
          doc: | 
            expect  ``signal=2 axes="x_pixel_offset,y_pixel_offset``"
          dimensions:
            rank: 2
            dim: [[1, numx], [2, numy]]
        distance(NX_FLOAT):
          unit: NX_LENGTH
          dimensions:
            rank: 2
            dim: [[1, numx], [2, numy]]
        event_index(NX_UINT):
          dimensions:
            rank: 1
            dim: [[1, numpulses]]
        event_pixel_id(NX_UINT):
          dimensions:
            rank: 1
            dim: [[1, numevents]]
        event_time_of_flight(NX_FLOAT):
          unit: NX_TIME_OF_FLIGHT
          dimensions:
            rank: 1
            dim: [[1, numevents]]
        (NXgeometry)origin:
          (NXorientation)orientation:
            value(NX_FLOAT):
              doc: |                 
                Six out of nine rotation parameters.
              dimensions:
                rank: 1
                dim: [[1, 6]]
          (NXshape)shape:
            description:
            shape:
            size(NX_FLOAT):
              unit: NX_LENGTH
              dimensions:
                rank: 1
                dim: [[1, 3]]
          (NXtranslation)translation:
            distance(NX_FLOAT):
              unit: NX_LENGTH
              dimensions:
                rank: 1
                dim: [[1, 3]]
        pixel_id(NX_UINT):
          dimensions:
            rank: 2
            dim: [[1, numx], [2, numy]]
        polar_angle(NX_FLOAT):
          unit: NX_ANGLE
          dimensions:
            rank: 2
            dim: [[1, numx], [2, numy]]
        pulse_time(NX_FLOAT):
          unit: NX_TIME
          dimensions:
            rank: 1
            dim: [[1, numpulses]]
        total_counts(NX_UINT):
        x_pixel_offset(NX_FLOAT):
          axis: 1
          primary: 1
          unit: NX_LENGTH
          dimensions:
            rank: 1
            dim: [[1, numx]]
        y_pixel_offset(NX_FLOAT):
          axis: 2
          primary: 1
          unit: NX_LENGTH
          dimensions:
            rank: 1
            dim: [[1, numy]]
      beamline:
      (NXdisk_chopper):
        exists: ['min', '0']
        distance(NX_FLOAT):
          unit: NX_LENGTH
      (NXmoderator)moderator:
        coupling_material:
        distance(NX_FLOAT):
          unit: NX_LENGTH
        temperature(NX_FLOAT):
          unit: NX_TEMPERATURE
        type:
      name:
      (NXaperture):
        exists: ['min', '0']
        (NXgeometry)origin:
          (NXorientation)orientation:
            value(NX_FLOAT):
              doc: |                 
                Six out of nine rotation parameters.
              dimensions:
                rank: 1
                dim: [[1, 6]]
          (NXshape)shape:
            description:
            shape:
            size(NX_FLOAT):
              unit: NX_LENGTH
              dimensions:
                rank: 1
                dim: [[1, 3]]
          (NXtranslation)translation:
            distance(NX_FLOAT):
              unit: NX_LENGTH
              dimensions:
                rank: 1
                dim: [[1, 3]]
        x_pixel_offset(NX_FLOAT):
          unit: NX_LENGTH
      (NXattenuator):
        exists: ['min', '0']
        distance(NX_FLOAT):
          unit: NX_LENGTH
      (NXpolarizer):
        exists: ['min', '0']
      (NXcrystal):
        exists: ['min', '0']
        (NXgeometry)origin:
          description:
          (NXorientation)orientation:
            value(NX_FLOAT):
              doc: |                 
                Six out of nine rotation parameters.
              dimensions:
                rank: 1
                dim: [[1, 6]]
          (NXshape)shape:
            description:
            shape:
            size(NX_FLOAT):
              unit: NX_LENGTH
          (NXtranslation)translation:
            distance(NX_FLOAT):
              unit: NX_LENGTH
              dimensions:
                rank: 1
                dim: [[1, 3]]
        type:
        wavelength(NX_FLOAT):
          unit: NX_WAVELENGTH
    (NXmonitor):
      exists: ['min', '0']
      data(NX_UINT):
        doc: | 
          expect  ``signal=1 axes="time_of_flight"``
        dimensions:
          rank: 1
          dim: [[1, numtimechannels]]
      distance(NX_FLOAT):
        unit: NX_LENGTH
      mode:
      time_of_flight(NX_FLOAT):
        unit: NX_TIME
        dimensions:
          rank: 1
          dim: [[1, numtimechannels + 1]]
    notes:
    proton_charge(NX_FLOAT):
      unit: NX_CHARGE
    raw_frames(NX_INT):
    run_number:
    (NXsample)sample:
      changer_position:
      holder:
      identifier:
      name:
        doc: | 
          Descriptive name of sample
      nature:
    start_time(NX_DATE_TIME):
    title:
    total_counts(NX_UINT):
      unit: NX_UNITLESS
    total_uncounted_counts(NX_UINT):
      unit: NX_UNITLESS
    (NXuser):
      exists: ['min', '1']
      facility_user_id:
      name:
      role:
