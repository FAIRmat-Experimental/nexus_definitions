category: application
doc: |   
  Application definition for a ptychography experiment, compatible with CXI from version 1.6.
  
  This is compatible with CXI from version 1.6 if this application definition
  is put at the top "entry" level. Above this a "cxi_version" field should be defined. The CXI format is name based, rather than class based, and so it is important
  to pay attention to the naming convention to be CXI compatible. There are duplications due to the format merger. These should be achieved by linking,
  with hdf5 Virtual Dataset being used to restructure any data that needs to be remapped. To be fully CXI compatible, all units (including energy) must be in SI units.
  
  An example here is that CXI expects the data to always to have shape (npts_x*npts_y, frame_size_x, frame_size_y). For nexus this is only true for arbitrary scan paths
  with raster format scans taking shape (npts_x, npts_y, frame_size_x, frame_size_y).

symbols: 
  doc: |     
    These symbols will be used below to coordinate the shapes of the datasets.

  npts_x: |     
    The number of points in the x direction

  npts_y: |     
    Number of points in the y direction.

  frame_size_x: |     
    Number of detector pixels in x

  frame_size_y: |     
    Number of detector pixels in y

type: group
NXcxi_ptycho(NXobject):
  (NXentry)entry_1:
    title:
      exists: ['min', '0', 'max', '1']
    start_time(NX_DATE_TIME):
      exists: ['min', '0', 'max', '1']
    end_time(NX_DATE_TIME):
      exists: ['min', '0', 'max', '1']
    definition(NX_CHAR):
      exists: ['min', '1', 'max', '1']
      doc: |         
        Official NeXus NXDL schema to which this file conforms
      enumeration: [NXcxi_ptycho]
    (NXinstrument)instrument_1:
      exists: ['min', '1', 'max', '1']
      (NXsource)source_1:
        exists: ['min', '1', 'max', '1']
        name(NX_CHAR):
          exists: ['min', '1', 'max', '1']
        energy(NX_FLOAT):
          exists: ['min', '1', 'max', '1']
          doc: |             
            This is the energy of the machine, not the beamline.
        probe(NX_FLOAT):
          exists: ['min', '1', 'max', '1']
        type(NX_FLOAT):
          exists: ['min', '1', 'max', '1']
      (NXbeam)beam_1:
        exists: ['min', '1', 'max', '1']
        energy(NX_FLOAT):
          exists: ['min', '1', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
        extent(NX_FLOAT):
          exists: ['min', '0', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
        incident_beam_divergence(NX_FLOAT):
          exists: ['min', '0', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
        incident_beam_energy(NX_FLOAT):
          exists: ['min', '1', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
        incident_energy_spread(NX_FLOAT):
          exists: ['min', '1', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
      (NXdetector)detector_1:
        exists: ['min', '1', 'max', '1']
        \@axes:
          type: NX_CHAR
          doc: |             
            should have value "[, data]"
        \@signal:
          type: NX_CHAR
          doc: |             
            should have value "data"
        (NXtransformations)transformations:
          vector(NX_NUMBER):
            exists: ['min', '1', 'max', '1']
        translation(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '1', 'max', '1']
          doc: |             
            This is an array of shape (npts_x*npts_y, 3) and can be a Virtual Dataset of x and y
          \@units:
            type: NX_CHAR
            exists: optional
          \@axes:
            exists: optional
            type: NX_CHAR
            doc: |               
              this should take the value "translation':'$slowaxisname':'$fastaxisname"
          \@interpretation:
            exists: optional
            type: NX_CHAR
            doc: |               
              This should be "image"
        data(NX_INT):
          signal: 1
          exists: ['min', '1', 'max', '1']
          dimensions:
            rank: 3 for arbitrary scan, 4 for raster
            dim: [[1, npts_x], [2, npts_y], [3, frame_size_x], [4, frame_size_y]]
        data_1(link):
          target: /NXentry/NXinstrument/NXdetector/data
          doc: |             
            This data must always have shape (npts_x*npts_y, frame_size_x, frame_size_y) regardless
            of the scan pattern. Use hdf5 virtual dataset to achieve this.
        x_pixel_size(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '1', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
        y_pixel_size(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '1', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
        distance(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '1', 'max', '1']
          doc: |             
            The distance between the detector and the sample
          \@units:
            type: NX_CHAR
            exists: optional
        beam_center_x(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '0', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
        beam_center_y(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '0', 'max', '1']
          \@units:
            type: NX_CHAR
            exists: optional
      (NXmonitor):
        exists: ['min', '0', 'max', '1']
        data(NX_FLOAT):
          dimensions:
            rank: 1 for arbitrary scan, 2 for raster
            dim: [[1, npts_x], [2, npts_y]]
  (NXdata):
    exists: ['min', '1', 'max', '1']
    \@axes:
      type: NX_CHAR
      exists: optional
      doc: |         
        This should be "[x,.]" for arbitrary scanning patterns, and "[x,.,.]" for raster
    \@signal:
      type: NX_CHAR
      exists: optional
      doc: |         
        This should be "data"
    data(link):
      target: /NXentry/NXinstrument/NXdetector/data
    x(link):
      target: /NXentry/NXsample/NXtransformations/x
    y(link):
      target: /NXentry/NXsample/NXtransformations/y
    x_indices(NX_CHAR):
    y_indices(NX_CHAR):
  (NXcollection)data_1:
    exists: ['min', '1', 'max', '1']
    doc: |       
      To ensure CXI compatibility the data in this group must always have shape that is
      (npts_x*npts_y, frame_size_x, frame_size_y). For nexus-style raster scans it is proposed that
      hdf5 virtual dataset is used.
    data(link):
      target: /NXentry/NXinstrument/NXdetector/data
    translation(link):
      target: /NXentry/NXinstrument/NXdetector/translation
  (NXsample)sample_1:
    exists: ['min', '1', 'max', '1']
    name(NX_CHAR):
      exists: ['min', '0', 'max', '1']
    transformations(NXtransformations):
      doc: |         
        This must contain two fields with the x and y motors that are linked via the
        dependency tree according to the real-life motor layout dependency.
        For raster scans x and y will have shape (npts_x, npts_y)
        For arbitrary scans x and y will be (npts_x*npts_y,)
        An attribute with the units for each motor is required.
      \@vector:
        exists: optional
        type: NX_NUMBER
    (NXcollection)geometry_1:
      exists: ['min', '1', 'max', '1']
      translation(link):
        target: /NXentry/NXinstrument/NXdetector/translation
