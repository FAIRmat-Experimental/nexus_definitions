category: application
doc: |
  Results of a paraprobe-surfacer tool run.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  n_ions: The total number of ions in the reconstruction.
  n_v_tri: The number of vertices of the alpha complex.
  n_f_tri: The number of faces of the alpha complex.
  n_f_tri_xdmf: |
    The total number of XDMF values to represent all faces of triangles via XDMF.
  n_f_tet_xdmf: |
    The total number of XDMF values to represent all faces of tetrahedra via XDMF.
NXapm_paraprobe_results_surfacer:
  (NXentry):
    # by default for appdefs the value of the exists keyword is required
    # unless it is explicitly specified differently
    exists: [min, 1, max, 1]
    \@version:
      doc: Version specifier of this application definition.

# ##MK::begin of the tool-specific section
    definition:
      doc: Official NeXus NXDL schema with which this file was written.
      enumeration: [NXapm_paraprobe_results_surfacer]
# ##MK::end of the tool-specific section

    program:
      doc: |
        Given name of the program/software/tool with which this NeXus
        (configuration) file was generated.
      \@version:
        doc: |
          Ideally program version plus build number, or commit hash or description
          of ever persistent resources where the source code of the program and
          build instructions can be found so that the program can be configured
          ideally in such a manner that the result of this computational process
          is recreatable in the same deterministic manner.
    analysis_identifier:
      exists: optional
      doc: |
        Ideally, a (globally persistent) unique identifier for referring
        to this analysis.
    analysis_description:
      exists: optional
      doc: |
        Possibility for leaving a free-text description about this analysis.
    start_time(NX_DATE_TIME):
      doc: |
        ISO 8601 formatted time code with local time zone offset to UTC
        information included when the analysis behind this results file
        was started, i.e. the paraprobe-tool executable started as a process.
    end_time(NX_DATE_TIME):
      doc: |
        ISO 8601 formatted time code with local time zone offset to UTC
        information included when the analysis behind this results file
        were completed and the paraprobe-tool executable exited as a process.
    config_filename:
      doc: |
        The absolute path and name of the config file for this analysis.
      \@version:
        doc: |
          At least SHA256 strong hash of the specific config_file for
          tracking provenance.
    results_path:
      exists: optional
      doc: |
        Path to the directory where the tool should store NeXus/HDF5 results
        of this analysis. If not specified results will be stored in the
        current working directory.
    status(NX_CHAR):
      doc: |
        A statement whether the paraprobe-tool executable managed to
        process the analysis or failed prematurely.
        
        This status is written to the results file after the end_time
        at which point the executable must not compute any analysis.
        Only when this status message is present and shows `success`, the
        user should consider the results. In all other cases it might be
        that the executable has terminated prematurely or another error
        occurred.
      enumeration: [success, failure]
    (NXuser):
      exists: recommended
      doc: |
        If used, contact information and eventually details
        of at least the person who performed this analysis.
      name:
      affiliation:
        exists: recommended
      address:
        exists: optional
      email:
        exists: recommended
      orcid:
        exists: recommended
      orcid_platform:
        exists: recommended
      telephone_number:
        exists: optional
      role:
        exists: recommended
      social_media_name:
        exists: optional
      social_media_platform:
        exists: optional
    (NXcoordinate_system_set):
      doc: Details about the coordinate system conventions used.
      (NXtransformations):
        exists: [min, 1, max, infty]
        doc: |
          The individual coordinate systems which should be used.
          Field names should be prefixed with the following controlled terms
          indicating which individual coordinate system is described:
          
          * paraprobe
          * lab
          * specimen
          * laser
          * leap
          * detector
          * recon
          

# ##MK::begin of the tool-specific section
    (NXprocess):
      exists: [min, 0, max, 1]
      window(NXcs_filter_boolean_mask):
        doc: |
          A bitmask which identifies which of the ions in the dataset were
          analyzed. Computations of alpha complexes may have filtered this
          ion set further but this process is deterministic.
        number_of_ions(NX_UINT):
          doc: |
            Number of ions covered by the mask. The mask may be 0 for most.
          unit: NX_UNITLESS
        bitdepth(NX_UINT):
          doc: |
            Number of bits assumed matching on a default datatype.
            (e.g. 8 bits for a C-style uint8).
          unit: NX_UNITLESS
        mask(NX_UINT):
          doc: |
            The unsigned integer array representing the content of the mask.
            If padding is used the padded bits are set to 0. The mask is for
            convenience always as large as the entire dataset as it will
            be stored compressed anyway. The convenience feature with this
            is that then the mask can be decoded with numpy and mirrored
            against the evaporation_id array and one immediately can filter
            out all points that were used by the paraprobe.
            The length of the array adds to the next unsigned integer
            if the number of ions in the dataset is not an integer
            multiple of the bitdepth.
          unit: NX_UNITLESS
          dimensions:
            rank: 1
            dim: [[1, i]]
      POINT_SET_WRAPPING(NXprocess):
        exists: [min, 0, max, infty]
        doc: |
          Paraprobe-surfacer can be used to load a ROI that is the entire or a
          sub-set of the ion point cloud. In the point_cloud_wrapping process
          the tool computes a triangulated surface mesh which encloses the
          ROI/point cloud. This mesh can be seen as a model for the edge of
          the dataset.
          Different algorithms can be used with paraprobe-surfacer to create
          this mesh such as convex hulls, alpha-shapes as their generalization,
          or alpha wrappings.
          Ideally, the resulting mesh should be a watertight polyhedron.
          This polyhedron is not necessarily convex. For some algorithms there
          is no guarantee that the resulting mesh yields a watertight mesh.
        # (NXcg_grid): currently we do not store the underlying grid
        # for eventually performed preprocessing
        alpha_complex(NXcg_alpha_complex):
          exists: [min, 0, max, infty]
          window(NXcs_filter_boolean_mask):
            doc: |
              A bitmask which identifies exactly all those ions whose positions
              were considered when defining the filtered point set from which
              the alpha complex was then in fact computed. This window
              can be different to the entire window as irrelevant ions might
              have been filtered out to reduce the computational costs of the
              alpha complex analysis.
            # filtered in addition to the ROI or again the entire dataset
            number_of_ions(NX_UINT):
              doc: |
                Number of ions covered by the mask.
                The mask value for most may be 0.
              unit: NX_UNITLESS
            bitdepth(NX_UINT):
              doc: |
                Number of bits assumed matching on a default datatype.
                (e.g. 8 bits for a C-style uint8).
              # which does paraprobe use
              unit: NX_UNITLESS
            mask(NX_UINT):
              doc: |
                The unsigned integer array representing the content of the mask.
                If padding is used the padded bits are set to 0. The mask is for
                convenience always as large as the entire dataset as it will
                be stored compressed anyway. The convenience feature with this
                is that then the mask can be decoded with numpy and mirrored
                against the evaporation_id array and one immediately can filter
                out all points that were used by the paraprobe.
                The length of the array adds to the next unsigned integer
                if the number of ions in the dataset is not an integer
                multiple of the bitdepth.
              unit: NX_UNITLESS
              dimensions:
                rank: 1
                dim: [[1, n_ions]]
          dimensionality(NX_UINT):
            unit: NX_UNITLESS
            enumeration: [2, 3]
          type:
            enumeration: [convex_hull, alpha_shape, alpha_wrapping, other, undefined]
          mode:
            enumeration: [general, regularized]
          alpha(NX_NUMBER):
            unit: NX_LENGTH
          offset(NX_NUMBER):
            exists: optional  # but is required when type is alpha_wrapping
            unit: NX_LENGTH
          triangle_set(NXcg_triangle_set):
            exists: optional
            doc: |
              The set of triangles in the coordinate system paraprobe
              which discretizes the exterior surface of the alpha complex.
            identifier_offset(NX_INT):
              doc: |
                Integer which specifies the first index to be used for distin-
                guishing triangles. Identifiers are defined either implicitly
                or explicitly. For implicit indexing the identifiers are defined
                on the interval [identifier_offset, identifier_offset+c-1].
              unit: NX_UNITLESS
            triangles(NXcg_face_list_data_structure):
              dimensionality(NX_POSINT):
                unit: NX_UNITLESS
              number_of_vertices(NX_POSINT):
                doc: Number of vertices.
                unit: NX_UNITLESS
              number_of_faces(NX_POSINT):
                doc: Number of faces.
                unit: NX_UNITLESS
              vertex_identifier_offset(NX_INT):
                unit: NX_UNITLESS
              face_identifier_offset(NX_INT):
                unit: NX_UNITLESS
              vertices(NX_FLOAT):
                unit: NX_LENGTH
                dimensions:
                  rank: 2
                  dim: [[1, n_v_tri], [2, 3]]
              faces(NX_UINT):
                unit: NX_UNITLESS
                dimensions:
                  rank: 2
                  dim: [[1, n_f_tri], [2, 3]]
              xdmf_topology(NX_UINT):
                doc: |
                  A list of as many tuples of XDMF topology key, XDMF number
                  of vertices and a triple of vertex indices specifying each
                  triangle. The total number of entries is n_f_tri * (1+1+3).
                unit: NX_UNITLESS
                dimensions:
                  rank: 1
                  dim: [[1, n_f_tri_xdmf]]
            is_watertight(NX_BOOLEAN):
              exists: optional
              doc: |
                Do the triangles define a triangulated surface mesh which
                is watertight?
            volume(NX_FLOAT):
              exists: optional
              doc: |
                The volume which the triangulated surface mesh encloses
                provided that the mesh is watertight.
              unit: NX_VOLUME
          interior_tetrahedra(NXcg_tetrahedron_set):
            exists: optional
            doc: |
              The set of tetrahedra which represent the interior volume of the
              complex if that is a closed 2-manifold.
            identifier_offset(NX_INT):
              doc: |
                Integer which specifies the first index to be used for distin-
                guishing tetrahedra. Identifiers are defined either implicitly
                or explicitly. For implicit indexing the identifiers are defined
                on the interval [identifier_offset, identifier_offset+c-1].
                For explicit indexing the identifier array has to be defined.
              unit: NX_UNITLESS
            volume(NX_FLOAT):
              exists: optional
              doc: |
                The accumulated volume of all interior tetrahedra.
              unit: NX_VOLUME
            tetrahedra(NXcg_face_list_data_structure):
              number_of_vertices(NX_POSINT):
                doc: Number of vertices.
                unit: NX_UNITLESS
              number_of_faces(NX_POSINT):
                doc: Number of faces.
                unit: NX_UNITLESS
              vertex_identifier_offset(NX_INT):
                unit: NX_UNITLESS
              face_identifier_offset(NX_INT):
                unit: NX_UNITLESS
              vertices(NX_FLOAT):
                unit: NX_LENGTH
                dimensions:
                  rank: 2
                  dim: [[1, n_v_tet], [2, 3]]
              xdmf_topology(NX_UINT):
                doc: |
                  A list of as many tuples of XDMF topology key, XDMF number
                  of vertices and a triple of vertex indices specifying each
                  triangle. The total number of entries is n_f_tet * (1+1+4).
                unit: NX_UNITLESS
                dimensions:
                  rank: 1
                  dim: [[1, n_f_tet_xdmf]]

      TRIANGLE_SET_WRAPPING(NXprocess):
        exists: [min, 0, max, infty]
        doc: |
          In the future we may want to wrap other primitives
          like triangles or polylines.
# ##MK::end of the tool-specific section

    performance(NXcs_profiling):
      exists: recommended
      current_working_directory:
      command_line_call:
        exists: optional
      start_time(NX_DATE_TIME):
        exists: recommended
      end_time(NX_DATE_TIME):
        exists: recommended
      total_elapsed_time(NX_NUMBER):
      number_of_processes(NX_POSINT):
      number_of_threads(NX_POSINT):
      number_of_gpus(NX_POSINT):
      (NXcs_computer):
        exists: recommended
        name:
          exists: recommended
        operating_system:
          \@version:
        uuid:
          exists: optional
        (NXcs_cpu):
          exists: [min, 0, max, infty]
          name:
            exists: optional
          (NXfabrication):
            exists: recommended
            identifier:
              exists: optional
            capabilities:
              exists: optional
        (NXcs_gpu):
          exists: [min, 0, max, infty]
          name:
            exists: optional
          (NXfabrication):
            exists: recommended
            identifier:
              exists: optional
            capabilities:
              exists: optional
        (NXcs_mm_sys):
          exists: [min, 0, max, 1]
          total_physical_memory(NX_NUMBER):
        (NXcs_io_sys):
          exists: [min, 0, max, 1]
          (NXcs_io_obj):
            exists: [min, 1, max, infty]
            technology:
            max_physical_capacity(NX_NUMBER):
            name:
              exists: optional
            (NXfabrication):
              exists: recommended
              identifier:
                exists: optional
              capabilities:
                exists: optional

        (NXcs_profiling_event):
          start_time(NX_DATE_TIME):
            exists: optional
          end_time(NX_DATE_TIME):
            exists: optional
          description:
          elapsed_time(NX_NUMBER):
          number_of_processes(NX_POSINT):
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_processes
              in the NXcs_profiling super class.
          number_of_threads(NX_POSINT):
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_threads
              in the NXcs_profiling super class.
          number_of_gpus(NX_POSINT):
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_threads
              in the NXcs_profiling super class.
          max_virtual_memory_snapshot(NX_NUMBER):
            exists: recommended
          max_resident_memory_snapshot(NX_NUMBER):
            exists: recommended
