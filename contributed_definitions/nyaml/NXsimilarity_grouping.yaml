category: base
doc: |
  Metadata to the results of a similarity grouping analysis.
  
  Similarity grouping analyses can be supervised segmentation or machine learning
  clustering algorithms. These are routine methods which partition the member of
  a set of objects/geometric primitives into (sub-)groups, features of
  different type. A plethora of algorithms have been proposed which can be applied
  also on geometric primitives like points, triangles, or (abstract) features aka
  objects (including categorical sub-groups).
  
  This base class considers metadata and results of one similarity grouping
  analysis applied to a set in which objects are either categorized as noise
  or belonging to a cluster.
  As the results of the analysis each similarity group, here called feature
  aka object can get a number of numerical and/or categorical labels.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays.
  c: Cardinality of the set.
  n_lbl_num: Number of numerical labels per object.
  n_lbl_cat: Number of categorical labels per object.
  n_features: Total number of similarity groups aka features, objects, clusters.
NXsimilarity_grouping:
  cardinality(NX_UINT):
    doc: Number of members in the set which is partitioned into features.
    unit: NX_UNITLESS
  number_of_numeric_labels(NX_UINT):
    doc: How many numerical labels does each feature have.
    unit: NX_UNITLESS
  number_of_categorical_labels(NX_UINT):
    doc: How many categorical labels does each feature have.
    unit: NX_UNITLESS
  # features(NX_CHAR):
  #  doc: |
  #     Reference to a set of features investigated in a cluster analysis.
  #     Features need to have disjoint numeric identifier.
  identifier_offset(NX_UINT):
    doc: |
      Which identifier is the first to be used to label a cluster.
      
      The value should be chosen in such a way that special values can be resolved:
      * identifier_offset-1 indicates an object belongs to no cluster.
      * identifier_offset-2 indicates an object belongs to the noise category.
      Setting for instance identifier_offset to 1 recovers the commonly used
      case that objects of the noise category get values to -1 and unassigned points to 0.
      Numerical identifier have to be strictly increasing.
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_lbl_num]]
  numerical_label(NX_UINT):
    doc: |
      Matrix of numerical label for each member in the set.
      For classical clustering algorithms this can for instance
      encode the cluster_identifier.
    unit: NX_UNITLESS
    dimensions:
      rank: 2
      dim: [[1, c], [2, n_lbl_num]]
  categorical_label(NX_CHAR):
    doc: |
      Matrix of categorical attribute data for each member in the set.
  # list instances of base classes of an applied cluster algorithm
  # e.g. (NXclustering_hdbscan):
    dimensions:
      rank: 2
      dim: [[1, c], [2, n_lbl_cat]]
  statistics(NXprocess):
    doc: |
      In addition to the detailed storage which members was grouped to which
      feature/group summary statistics are stored under this group.
    # at the level of the set
    number_of_unassigned_members(NX_UINT):
      doc: Total number of members in the set which are categorized as unassigned.
      unit: NX_UNITLESS
      dimensions:
        rank: 1
        dim: [[1, n_lbl_num]]
    noise(NX_UINT):
      doc: Total number of members in the set which are categorized as noise.
      unit: NX_UNITLESS
      dimensions:
        rank: 1
        dim: [[1, n_lbl_num]]
    # at the level of the feature set
    number_of_features(NX_UINT):
      doc: Total number of clusters (excluding noise and unassigned).
      unit: NX_UNITLESS
    feature_identifier(NX_UINT):
      doc: Array of numerical identifier of each feature (cluster).
      unit: NX_UNITLESS
      dimensions:
        rank: 2
        dim: [[1, n_features], [2, n_lbl_num]]
    feature_member_count(NX_UINT):
      doc: Array of number of members for each feature.
      unit: NX_UNITLESS
      dimensions:
        rank: 2
        dim: [[1, n_features], [2, n_lbl_num]]
