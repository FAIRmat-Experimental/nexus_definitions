category: application
doc: |   
  This is the application definition for x-ray or neutron tomography raw data.
  
  In tomography
  a number of dark field images are measured, some bright field images and, of course the sample.
  In order to distinguish between them images carry a image_key.

symbols: 
  doc: |     
    These symbols will be used below to coordinate datasets with the same shape.

  nFrames: | 
    Number of frames

  xSize: | 
    Number of pixels in X direction

  ySize: | 
    Number of pixels in Y direction

type: group
NXtomo(NXobject):
  (NXentry)entry:
    title:
      exists: ['min', '0', 'max', '1']
    start_time(NX_DATE_TIME):
      exists: ['min', '0', 'max', '1']
    end_time(NX_DATE_TIME):
      exists: ['min', '0', 'max', '1']
    definition:
      doc: | 
        Official NeXus NXDL schema to which this file conforms
      enumeration: [NXtomo]
    (NXinstrument)instrument:
      (NXsource):
        exists: ['min', '0', 'max', '1']
        type:
          exists: ['min', '0', 'max', '1']
        name:
          exists: ['min', '0', 'max', '1']
        probe:
          exists: ['min', '0', 'max', '1']
          enumeration: [neutron, x-ray, electron]
      (NXdetector)detector:
        data(NX_INT):
          signal: 1
          dimensions:
            rank: 3
            dim: [[1, nFrames], [2, xSize], [3, ySize]]
        image_key(NX_INT):
          doc: |             
            In order
            to distinguish between sample projections, dark and flat
            images, a magic number is recorded per frame.
            The key is as follows':'
            
            * projection = 0
            * flat field = 1
            * dark field = 2
            * invalid = 3
          dimensions:
            rank: 1
            dim: [[1, nFrames]]
        x_pixel_size(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '0', 'max', '1']
        y_pixel_size(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '0', 'max', '1']
        distance(NX_FLOAT):
          unit: NX_LENGTH
          exists: ['min', '0', 'max', '1']
          doc: | 
            Distance between detector and sample
        x_rotation_axis_pixel_position(NX_FLOAT):
          exists: ['min', '0', 'max', '1']
        y_rotation_axis_pixel_position(NX_FLOAT):
          exists: ['min', '0', 'max', '1']
    (NXsample)sample:
      name:
        doc: | 
          Descriptive name of sample
      rotation_angle(NX_FLOAT):
        unit: NX_ANGLE
        axis: 1
        doc: |           
          In practice this axis is always aligned along one pixel direction on the detector and usually vertical.
          There are experiments with horizontal rotation axes, so this would need to be indicated somehow.
          For now the best way for that is an open question.
        dimensions:
          rank: 1
          dim: [[1, nFrames]]
      x_translation(NX_FLOAT):
        unit: NX_LENGTH
        exists: ['min', '0', 'max', '1']
        dimensions:
          rank: 1
          dim: [[1, nFrames]]
      y_translation(NX_FLOAT):
        unit: NX_LENGTH
        exists: ['min', '0', 'max', '1']
        dimensions:
          rank: 1
          dim: [[1, nFrames]]
      z_translation(NX_FLOAT):
        unit: NX_LENGTH
        exists: ['min', '0', 'max', '1']
        dimensions:
          rank: 1
          dim: [[1, nFrames]]
    (NXmonitor)control:
      exists: ['min', '0', 'max', '1']
      data(NX_FLOAT):
        unit: NX_ANY
        doc: |           
          Total integral monitor counts for each measured frame. Allows a to correction for
          fluctuations in the beam between frames.
        dimensions:
          rank: 1
          dim: [[1, nFrames]]
    (NXdata)data:
      data(link):
        target: /NXentry/NXinstrument/detector:NXdetector/data
      rotation_angle(link):
        target: /NXentry/NXsample/rotation_angle
      image_key(link):
        target: /NXentry/NXinstrument/detector:NXdetector/image_key
