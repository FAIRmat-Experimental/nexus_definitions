category: base
doc: | 
  A Fermi chopper, possibly with curved slits.

type: group
NXfermi_chopper(NXobject):
  type:
    doc: | 
      Fermi chopper type
  rotation_speed(NX_FLOAT):
    unit: NX_FREQUENCY
    doc: | 
      chopper rotation speed
  radius(NX_FLOAT):
    unit: NX_LENGTH
    doc: | 
      radius of chopper
  slit(NX_FLOAT):
    unit: NX_LENGTH
    doc: | 
      width of an individual slit
  r_slit(NX_FLOAT):
    unit: NX_LENGTH
    doc: | 
      radius of curvature of slits
  number(NX_INT):
    unit: NX_UNITLESS
    doc: | 
      number of slits
  height(NX_FLOAT):
    unit: NX_LENGTH
    doc: | 
      input beam height
  width(NX_FLOAT):
    unit: NX_LENGTH
    doc: | 
      input beam width
  distance(NX_FLOAT):
    unit: NX_LENGTH
    doc: | 
      distance. Note, it is recommended to use NXtransformations instead.
  wavelength(NX_FLOAT):
    unit: NX_WAVELENGTH
    doc: | 
      Wavelength transmitted by chopper
  energy(NX_FLOAT):
    unit: NX_ENERGY
    doc: | 
      energy selected
  (NXgeometry):
    deprecated: Use the field `depends_on` and ':'ref':'`NXtransformations` to position the chopper and NXoff_geometry to describe its shape instead
    doc: | 
      geometry of the fermi chopper
  absorbing_material:
    doc: | 
      absorbing material
  transmitting_material:
    doc: | 
      transmitting material
  (NXoff_geometry):
    exists: ['min', '0']
    doc: |       
      This group describes the shape of the beam line component
  \@default:
    doc: |       
      .. index':'':' plotting
      
      Declares which child group contains a path leading
      to a ':'ref':'`NXdata` group.
      
      It is recommended (as of NIAC2014) to use this attribute
      to help define the path to the default dataset to be plotted.
      See https':'//www.nexusformat.org/2014_How_to_find_default_data.html
      for a summary of the discussion.
  depends_on(NX_CHAR):
    doc: |       
      NeXus positions components by applying a set of translations and rotations
      to apply to the component starting from 0, 0, 0. The order of these operations
      is critical and forms what NeXus calls a dependency chain. The depends_on
      field defines the path to the top most operation of the dependency chain or the
      string "." if located in the origin. Usually these operations are stored in a
      NXtransformations group. But NeXus allows them to be stored anywhere.
      
      .. todo':'':'
        Add a definition for the reference point of a fermi chopper.
  (NXtransformations):
    doc: |       
      This is the group recommended for holding the chain of translation
      and rotation operations necessary to position the component within
      the instrument. The dependency chain may however traverse similar groups in
      other component groups.
